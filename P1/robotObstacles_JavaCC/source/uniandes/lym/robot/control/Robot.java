/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        public static void main(String args[]) {
                Robot parcer = null;
                StringBuffer sb = null;

                try {
                        File archivo = new File("../P1/robotObstacles_JavaCC/source/uniandes/lym/robot/control/robot-conf");
                        FileReader fr = new FileReader(archivo);
                        BufferedReader br = new BufferedReader(fr);

                        String linea = "";
                        String input = "";
                        while ((linea = br.readLine()) != null) {
                                input = input + linea;
                        }
                  parcer = new Robot(new FileInputStream("../P1/robotObstacles_JavaCC/source/uniandes/lym/robot/control/robot-conf"));
                  sb = new StringBuffer(input);
                } catch (Exception e) {
                        e.printStackTrace();
                }

                try {
                  parcer.programa();
                  System.out.println("ALL OK");
                }
                catch (Exception e) {
                  System.out.println("NOT OK");
                  System.out.println(e.getMessage());
                }
        }

  final public void programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WALK:
        comando();
        break;
      case 32:
        bloque();
        break;
      case 34:
        fun();
        break;
      case 35:
        ifS();
        break;
      case 36:
        fundef();
        break;
      case 37:
        vardef();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WALK:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void bloque() throws ParseException {
    jj_consume_token(32);
    jj_consume_token(33);
  }

  final public void fun() throws ParseException {
    jj_consume_token(34);
    jj_consume_token(33);
  }

  final public void ifS() throws ParseException {
    jj_consume_token(35);
    jj_consume_token(33);
  }

  final public void fundef() throws ParseException {
    jj_consume_token(36);
    jj_consume_token(33);
  }

  final public void vardef() throws ParseException {
    jj_consume_token(37);
    jj_consume_token(33);
  }

  final public void comando() throws ParseException {
    jj_consume_token(WALK);
    jj_consume_token(RPAR);
  }

  final public boolean command(StringBuffer sistema) throws ParseException {
                int x;
                String salida=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_MOVER:
    case T_TURNRIGHT:
    case T_PONER:
    case T_RECOGER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T_TURNRIGHT:
        jj_consume_token(T_TURNRIGHT);
        jj_consume_token(38);
        jj_consume_token(RPAR);
                                          world.turnRight();salida = "Comando GIRAR DER";
        break;
      case T_MOVER:
        jj_consume_token(T_MOVER);
        jj_consume_token(38);
        x = numero();
        jj_consume_token(RPAR);
                                                       world.moveForward(x);salida = "Comando MOVER ADELANTE";
        break;
      case T_PONER:
        jj_consume_token(T_PONER);
        jj_consume_token(38);
        objetoPoner();
        jj_consume_token(RPAR);
                                                        salida = "Comando:  PONER";
        break;
      case T_RECOGER:
        jj_consume_token(T_RECOGER);
        jj_consume_token(38);
        objetoRecoger();
        jj_consume_token(RPAR);
                                                                 salida = "Comando:  Recoger";
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case 0:
      jj_consume_token(0);
                         {if (true) return false;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void objetoPoner() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_CHIPS:
      jj_consume_token(T_CHIPS);
      jj_consume_token(39);
      f = numero();
                                               world.putChips(f);
      break;
    case T_BALLOONS:
      jj_consume_token(T_BALLOONS);
      jj_consume_token(39);
      f = numero();
                                                           world.putBalloons(f);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void objetoRecoger() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case T_CHIPS:
      jj_consume_token(T_CHIPS);
      jj_consume_token(39);
      f = numero();
                                              world.pickChips(f);
      break;
    case T_BALLOONS:
      jj_consume_token(T_BALLOONS);
      jj_consume_token(39);
      f = numero();
                                                           world.grabBalloons(f);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */
  final public int numero() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUMERO);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                // Dada la forma de NUMERO, sabemos que solo puede tener dï¿½gitos
                                // Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
                                {if (true) throw new Error("Numero demasiado grande: "+token.image+"!!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x10000,0x1e0,0x1e1,0x600,0x600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3d,0x3d,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
