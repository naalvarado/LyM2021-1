/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Abril: 2008 - Simplificado apra solo interpretaci�n
2020: Obstaculos


 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		String salida=new String();
		
	}
	
	{
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Comando GIRAR DER";}
		| 	<T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Comando MOVER ADELANTE";}  
		|  <T_PONER> "("  objetoPoner() ")" {	salida = "Comando:  PONER"; }					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	{salida = "Comando:  Recoger";}
		)  

		{
		    try {
	    			        Thread.sleep(2000);
	    			    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    			    }
	    			 
			sistema.append(salida);
			return true;
		}

		

		| <EOF> {return false;} 
	}

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f);})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Numero demasiado grande: "+token.image+"!!");
			}
			return total;
		}
	}

	